// Code generated by MockGen. DO NOT EDIT.
// Source: ./aggregator/types/types.go
//
// Generated by this command:
//
//	mockgen -source=./aggregator/types/types.go -destination=./aggregator/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"fmt"
	reflect "reflect"

	api "github.com/zoninnik89/commons/api"
	gomock "go.uber.org/mock/gomock"
)

// MockAggregatorService is a mock of AggregatorService interface.
type MockAggregatorService struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorServiceMockRecorder
}

// MockAggregatorServiceMockRecorder is the mock recorder for MockAggregatorService.
type MockAggregatorServiceMockRecorder struct {
	mock *MockAggregatorService
}

// NewMockAggregatorService creates a new mock instance.
func NewMockAggregatorService(ctrl *gomock.Controller) *MockAggregatorService {
	mock := &MockAggregatorService{ctrl: ctrl}
	mock.recorder = &MockAggregatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregatorService) EXPECT() *MockAggregatorServiceMockRecorder {
	return m.recorder
}

// GetClicksCounter mocks base method.
func (m *MockAggregatorService) GetClicksCounter(arg0 context.Context, arg1 *api.GetClicksCounterRequest) (*api.ClickCounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClicksCounter", arg0, arg1)
	ret0, _ := ret[0].(*api.ClickCounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClicksCounter indicates an expected call of GetClicksCounter.
func (mr *MockAggregatorServiceMockRecorder) GetClicksCounter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClicksCounter", reflect.TypeOf((*MockAggregatorService)(nil).GetClicksCounter), arg0, arg1)
}

// StoreClick mocks base method.
func (m *MockAggregatorService) StoreClick(arg0 context.Context, arg1 *api.SendClickRequest) (*api.Click, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClick", arg0, arg1)
	ret0, _ := ret[0].(*api.Click)
	fmt.Println("I'm here")
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreClick indicates an expected call of StoreClick.
func (mr *MockAggregatorServiceMockRecorder) StoreClick(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClick", reflect.TypeOf((*MockAggregatorService)(nil).StoreClick), arg0, arg1)
}

// ValidateClick mocks base method.
func (m *MockAggregatorService) ValidateClick(ctx context.Context, request *api.SendClickRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClick", ctx, request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateClick indicates an expected call of ValidateClick.
func (mr *MockAggregatorServiceMockRecorder) ValidateClick(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClick", reflect.TypeOf((*MockAggregatorService)(nil).ValidateClick), ctx, request)
}
